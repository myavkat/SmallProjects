using System;
using System.Collections.Generic;

namespace PE12HighlyDivisibleTriangularNumber
{
    class Program
    {
        //        The sequence of triangle numbers is generated by adding the natural numbers.So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
        //1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
        //Let us list the factors of the first seven triangle numbers:
        // 1: 1
        // 3: 1,3
        // 6: 1,2,3,6
        //10: 1,2,5,10
        //15: 1,3,5,15
        //21: 1,3,7,21
        //28: 1,2,4,7,14,28
        //We can see that 28 is the first triangle number to have over five divisors.
        //What is the value of the first triangle number to have over five hundred divisors?
        static void Main(string[] args)
        {
            foreach (var triangleNumber in FindTriangleNumbers())
            {
                int divisorCount = 0;
                for (int dividal = 1; dividal <= Math.Sqrt(triangleNumber); dividal++)
                {
                    if (triangleNumber % 2 == 0)
                    {
                        if (triangleNumber % dividal == 0)
                        {
                            divisorCount += 2;
                        }
                    }

                }
                if (divisorCount >= 500)
                {
                    Console.WriteLine(triangleNumber);
                }


            }

        }
        static List<int> FindTriangleNumbers()
        {
            List<int> triangleNumbers = new List<int>();
            int triangleNumber = 0;
            for (int naturalNumber = 1; naturalNumber < 100000; naturalNumber++)
            {

                triangleNumber = triangleNumber + naturalNumber;
                triangleNumbers.Add(triangleNumber);
            }
            return triangleNumbers;
        }
    }
}
